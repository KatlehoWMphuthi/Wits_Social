# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3
  codecov: codecov/codecov@3.2.2
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine
      resource-class: xlarge

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Create an AVD named "myavd"
      - android/create-avd:
          avd-name: myavd
          system-image: system-images;android-30;google_apis;x86
          install: true
      # By default, after starting up the emulator, a cache will be restored,
      # "./gradlew assembleDebugAndroidTest" will be run and then a script
      # will be run to wait for the emulator to start up.
      # Specify the "post-emulator-launch-assemble-command" command to override
      # the gradle command run, or set "wait-for-emulator" to false to disable
      # waiting for the emulator altogether.
      - android/start-emulator:
          avd-name: myavd
          restore-gradle-cache-prefix: v1a
      - run:
          command: |
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
            
      
      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug 
      - android/run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
      - run: 
          command: adb shell monkey -p com.example.witssocial 1


      # And finally run the release build
      - run:
          command: ./gradlew jacocoTestReport
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease
      - codecov/upload:
          file: '/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
      - codecov/upload:
          file: '/app/build/reports/coverage/androidTest/debug/report.xml'

      - android/save-gradle-cache:
          cache-prefix: v1a
      
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      
  tagged-build:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /^v.*/